#!perl

# DATE
# VERSION

use 5.010;
use strict;
use warnings;

use ExtUtils::MakeMaker;
use Perinci::CmdLine::Any;

our %SPEC;
$SPEC{fatpack_info} = {
    v => 1.1,
    summary => 'Given a fatpacked script, show various info',
    args => {
        script => {
            schema => 'str*',
            'x.schema.entity' => 'filename',
            req => 1,
            pos => 0,
            completion => sub {
                require Complete::Program;

                my %args = @_;
                my $word = $args{word};

                Complete::Program::complete_program(word => $word);
            },
        },
        list_modules => {
            schema => ['bool' => is=>1],
            cmdline_aliases => {l=>{}},
            tags => ['category:action'],
        },
        show_module_version => {
            schema => ['bool' => is=>1],
            cmdline_aliases => {V=>{}},
        },
    },
    args_rels => {
        dep_all => [show_module_version => ['list_modules']],
    },
    examples => [
        {
            summary => 'Show total size of script and fatpack contents',
            src => 'fatpack-info /tmp/script.fatpack',
            src_plang => 'bash',
            test => 0,
            'x.doc.show_result' => 0,
        },
        {
            summary => 'Show list of fatpacked modules (-l) along with their versions (-V)',
            src => 'fatpack-info -lV `which fatpacked-script`',
            src_plang => 'bash',
            test => 0,
            'x.doc.show_result' => 0,
        },
    ],
};
sub fatpack_info {
    require File::Which;

    my %args = @_;

    my $script = $args{script};
    unless (-f $script) {
        $script = File::Which::which($script);
        return [400, "No such script '$script'"] unless $script;
    }
    open my($fh), "<", $script
        or return [500, "Can't open script '$script': $!"];

    my $fatpack_sig_found;

    my $in_fatpacked;
    my $module;
    my $end_marker;
    my %modules;
    my $tot_lines;
    my $tot_bytes;
    my $cur_content;
    my $temp_filename;

    for (<$fh>) {
        if ($in_fatpacked) {
            if (/^\Q$end_marker\E$/) {
                $in_fatpacked = 0;
                if (defined($cur_content) && $args{show_module_version}) {
                    require File::Slurper;
                    require File::Temp;
                    unless ($temp_filename) {
                        (undef, $temp_filename) = File::Temp::tempfile();
                    }
                    File::Slurper::write_binary($temp_filename, $cur_content);
                    $modules{$module}{version} =
                        MM->parse_version($temp_filename);
                }
                $cur_content = '';
                next;
            } else {
                s/^  //;
                $tot_lines++;
                $tot_bytes += length;
                $modules{$module}{lines}++;
                $modules{$module}{bytes} += length;
                $cur_content .= $_;
                next;
            }
        } else {
            if (/^\$fatpacked\{"(.+?)"\} = .+<<'(.+)';$/) {
                $in_fatpacked++;
                $module = $1;
                $end_marker = $2;
                next;
            }
            if (/^my \%fatpacked;/) {
                $fatpack_sig_found++;
                next;
            }
        }
    }

    if (!$fatpack_sig_found && !%modules) {
        return [412, "File content does not seem like a fatpacked script"];
    }

    my $res;

    if ($args{list_modules}) {
        $res = [];
        for my $k (sort keys %modules) {
            my $mod = $k; $mod =~ s/\.pm$//; $mod =~ s!/!::!g;
            if ($args{show_module_version}) {
                push @$res, "$mod\t" . $modules{$k}{version};
            } else {
                push @$res, $mod;
            }
        }
    } else {
        $res = {
            file_size => (-s $script),
            modules => \%modules,
            tot_fatpacked_lines => $tot_lines,
            tot_fatpacked_bytes => $tot_bytes,
        };
    };

    [200, "OK", $res];
}

Perinci::CmdLine::Any->new(
    url => '/main/fatpack_info',
)->run;

# ABSTRACT:
# PODNAME:
